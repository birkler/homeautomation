# pip3 install esphome
# Use esp32-poe-iso
#

#
# CT = Current Transformer
#                          +-------------------+
#                          |    ETHERNET       |
#                          |                   |
#                          |                   |
#                          |                   |
#                          | GPIO13     GPIO5  |
#                          | GPIO14     GPIO4  |
#                          | GPIO15     GPIO3  |
#                          | GPIO16     GPIO2  |
#                          | GPIO32     GPIO1  |
#                          | GPIO33     GPIO0  |
#                          | GPIO34    ESP_EN  |
#                          | GPIO35       GND  |
#                          | GPIO36       3V3  |
#                          | GPIO39        5V  |
#                          |                   |
#                          |                   |
#                          |                   |
#                          |                   |
#                          |    ANTENNA        |
#                          +-------------------+
#
# TIP:create one reference for each current transformer
# sharing one common reference caused crosstalk and incorrect readings
#
#  3V3 ----[220]---+-----[220]------GND
#                  |
#                  +-----|[-10u----GND
#                  |
#                  +-- 1V6 -- CT2_REF
#
#  3V3 ----[100]---+-----[100]------GND
#                  |
#                  +-- 1V6 -- CT1_REF
#
# CT1 ---[220]----CT1_REF
# CT2 ---[220]----CT2_REF
#
#  (x1) CT1           
#  (x2) CT2                          
#  (x3) CT2_REF                           
#  (x4) CT1_REF                           
#  (x5) REED1                         
#  (x6) REED2                          
#  (x7) REED3
#  (x8) GND         
# https://learn.openenergymonitor.org/electricity-monitoring/ct-sensors/yhdc-sct-013-000-ct-sensor-report                

esphome:
  name: garage_monitor
  platform: ESP32
  board: esp32-poe-iso

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO17_OUT
  phy_addr: 0
  power_pin: GPIO12


# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

sensor:
  - platform: ct_clamp
    id: adc_sensor_ct1
    sensor: adc_sensor_raw_ct1
    name: "Washer"
    unit_of_measurement: "A"
    accuracy_decimals: 0
    update_interval: 15s
    filters:
      - calibrate_linear:
          # Measured value of 0 maps to 0A
          - 0 -> 0
          - 0.78 -> 9.6
  
  - platform: ct_clamp
    id: adc_sensor_ct2
    sensor: adc_sensor_raw_ct2
    name: "Dryer"
    unit_of_measurement: "A"
    accuracy_decimals: 0
    update_interval: 15s
    filters:
      - calibrate_linear:
          # Measured value of 0 maps to 0A
          - 0 -> 0
          - 0.78 -> 9.6



  # Example source sensor
  - platform: adc

    pin: 35
    id: adc_sensor_raw_ct1
    attenuation: 6dB
    internal: True

  # Example source sensor
  - platform: adc
    pin: 36
    id: adc_sensor_raw_ct2
    attenuation: 6dB
    internal: True


binary_sensor:
  - platform: gpio
    name: "Garage Exterior Door"
    device_class: Door
    pin:
      number: 5
      mode: INPUT_PULLUP

  - platform: gpio
    name: "Garage Gate"
    device_class: Door
    pin:
      number: 4
      mode: INPUT_PULLUP

  - platform: gpio
    name: "Garage Interior Door"
    device_class: Door
    pin:
      number: 3
      mode: INPUT_PULLUP



  - platform: template
    name: "Dryer"
    #icon: mdi-tumble-dryer
#    device_class: power
    lambda: |-
      if (id(adc_sensor_ct2).state > 3.0f) {
        return true;
      } else {
        return false;
      }

    on_press:
      then:
        - switch.turn_off: washer_finished_switch

    on_release:
      then:
        - switch.turn_off: washer_finished_switch


  - platform: template
    name: "Washer"
#     device_class: power
#     icon: mdi-washing-machine
    lambda: |-
      if (id(adc_sensor_ct1).state > 1.0f) {
        return true;
      } else {
        return false;
      }
    on_press:
      then:
        - switch.turn_off: washer_finished_switch
    on_release:
      then:
        - script.execute: washer_maybe_finished_script


script:
  - id: washer_maybe_finished_script
    mode: restart    
    then:
      - delay: 5 min
      - switch.turn_on: washer_finished_switch
      - script.execute: washer_finished_timeout_script
  - id: washer_finished_timeout_script
    mode: restart     # Washer finished will be on for max N minutes 
    then:
      - delay: 240 min
      - switch.turn_off: washer_finished_switch



globals:
  - id: washer_finished_switch_state_global
    type: int
    restore_value: no
    initial_value: '0'

switch:
  - platform: template
    id: washer_finished_switch
    name: Washer Finished
    lambda: |-
      if (id(washer_finished_switch_state_global) > 0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - globals.set:
          id: washer_finished_switch_state_global
          value: '1'
    turn_off_action:
      - globals.set:
          id: washer_finished_switch_state_global
          value: '0'




